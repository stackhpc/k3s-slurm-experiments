- name: Ensure configuration directory
  file:
    path: "{{ terraform_project_path }}"
    state: directory

- name: Template out configuration
  template:
    src: "{{ item }}"
    dest: "{{ terraform_project_path }}/{{ item | splitext | first }}" # assumes .j2 extension on template
  loop:
    - cluster.tf.j2
    - terraform.tfvars.json.j2

- name: Create Terraform plan
  # Can't generate a destroy plan with community.general.terraform
  # which means we can't prompt the user
  command: >
    terraform -chdir={{ terraform_project_path }} plan
    {{ '-destroy' if terraform_state == 'absent' else '' }}
    -out=terraform.plan
    -no-color
  # consider -json
    # force_init: yes
    # init_reconfigure: yes
  register: _tf_plan

- name: Show Terraform plan
  debug:
    msg: "{{ _tf_plan.stdout }}"

- name: Set fact for changes
  set_fact:
    terraform_changes: "{{ false if 'No changes. Your infrastructure matches the configuration.' in _tf_plan.stdout else true }}"

- name: Prompt to approve Terraform plan execution
  pause:
    prompt: "Do you want to execute this plan? (Only 'yes' executes)"
  register: _tf_approve_plan
  when:
    - terraform_changes
    - not terraform_autoapprove | bool
  changed_when: false

- name: End host if Terraform plan is not approved by user
  meta: end_host
  when:
    - terraform_changes
    - not terraform_autoapprove | bool
    - not _tf_approve_plan.user_input | bool

- name: Provision infrastructure using Terraform
  community.general.terraform:
    project_path: "{{ terraform_project_path }}"
    state: "{{ terraform_state }}"
    force_init: yes
    init_reconfigure: yes
    plan_file: terraform.plan
  register: terraform_provision
  when:
    - terraform_changes
    - terraform_autoapprove or (_tf_approve_plan.user_input | bool)

- name: Show Terraform provision output
  debug:
    msg: "{{ terraform_provision.stdout }}"
  when: "'stdout' in terraform_provision | default('')"
